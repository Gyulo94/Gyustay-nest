// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String  @unique
  name        String?
  password    String
  image       String?
  description String?
  provider    String  @default("credentials")
  role        Role    @default(USER)

  rooms    Room[]
  likes    Like[]
  comments Comment[]
  bookings Booking[]
}

model Room {
  id                 Int       @id @default(autoincrement())
  title              String
  address            String
  lat                String
  lng                String
  description        String
  price              Int
  bedroomDescription String?
  freeCancel         Boolean   @default(false)
  selfCheckIn        Boolean   @default(false)
  officeSpace        Boolean   @default(false)
  hasMountainsView   Boolean   @default(false)
  hasShampoo         Boolean   @default(false)
  hasFreeLaundry     Boolean   @default(false)
  hasAirConditioner  Boolean   @default(false)
  hasWifi            Boolean   @default(false)
  hasBarbeque        Boolean   @default(false)
  hasFreeParking     Boolean   @default(false)
  categoryId         String    @db.Uuid
  userId             String?   @db.Uuid
  createdAt          DateTime  @default(now())
  category           Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user               User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  images             Image[]
  likes              Like[]
  comments           Comment[]
  bookings           Booking[]

  @@index([userId])
}

model Category {
  id    String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name  String @unique
  rooms Room[]
}

model Image {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  url    String
  roomId Int
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([roomId])
}

model Faq {
  id          Int    @id @default(autoincrement())
  title       String
  description String
}

model Comment {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content   String
  createdAt DateTime @default(now())
  userId    String   @db.Uuid
  roomId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([userId, roomId])
}

model Like {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  userId    String   @db.Uuid
  roomId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@index([userId, roomId])
}

model Booking {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  checkIn     DateTime
  checkOut    DateTime
  guestCount  Int
  totalDays   Int
  totalAmount Int
  roomId      Int
  userId      String        @db.Uuid
  room        Room          @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  status      BookingStatus @default(PENDING)
}

enum BookingStatus {
  SUCCESS
  PENDING
  CANCELLED
}
